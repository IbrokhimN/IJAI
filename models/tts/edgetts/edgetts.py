import asyncio
import edge_tts
import threading
import queue
import os
import uuid
import sys
from pathlib import Path

# === –ù–∞—Å—Ç—Ä–æ–π–∫–∏ ===
VOICE = "ru-RU-DmitryNeural"   # –≥–æ–ª–æ—Å (ru-RU-SvetlanaNeural, en-US-AriaNeural, ...)
PLAYER_CMD = "mpg123 -q"       # –ª—é–±–æ–π CLI-–ø–ª–µ–µ—Ä (mpg123, ffplay -nodisp -autoexit ...)
TMP_DIR = Path("tts_tmp")      # –ø–∞–ø–∫–∞ –¥–ª—è –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
TMP_DIR.mkdir(exist_ok=True)

# –û—á–µ—Ä–µ–¥—å –¥–ª—è –æ–∑–≤—É—á–∫–∏
speech_queue = queue.Queue()

async def speak(text: str):
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º mp3 –∏ –ø—Ä–æ–∏–≥—Ä—ã–≤–∞–µ–º"""
    filename = TMP_DIR / f"tts_{uuid.uuid4().hex}.mp3"
    tts = edge_tts.Communicate(text, voice=VOICE)
    await tts.save(str(filename))
    os.system(f"{PLAYER_CMD} {filename}")
    try:
        filename.unlink()
    except FileNotFoundError:
        pass

def tts_worker():
    """–§–æ–Ω–æ–≤—ã–π –ø–æ—Ç–æ–∫: –±–µ—Ä—ë—Ç —Ç–µ–∫—Å—Ç –∏–∑ –æ—á–µ—Ä–µ–¥–∏ –∏ –æ–∑–≤—É—á–∏–≤–∞–µ—Ç"""
    loop = asyncio.new_event_loop()
    asyncio.set_event_loop(loop)
    while True:
        text = speech_queue.get()
        if text is None:
            break
        loop.run_until_complete(speak(text))
        speech_queue.task_done()

# –ó–∞–ø—É—Å–∫ —Ñ–æ–Ω–æ–≤–æ–≥–æ –ø–æ—Ç–æ–∫–∞
threading.Thread(target=tts_worker, daemon=True).start()

# === –ü—Ä–∏–º–µ—Ä –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ç–µ–∫—Å—Ç–∞ ===
# –ó–¥–µ—Å—å –≤–º–µ—Å—Ç–æ –º–æ–¥–µ–ª–∏ –ø—Ä–æ—Å—Ç–æ —á–∏—Ç–∞–µ–º —Ç–µ–∫—Å—Ç –∏–∑ stdin –ø–æ –∫—É—Å–∫–∞–º,
# –Ω–æ –º–æ–∂–Ω–æ –ø–æ–¥–∫–ª—é—á–∏—Ç—å llm.create_chat_completion(stream=True)
def main():
    print("üîä Edge-TTS Demo (–≤–≤–æ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç, exit –¥–ª—è –≤—ã—Ö–æ–¥–∞)")
    buffer = ""
    for line in sys.stdin:
        line = line.strip()
        if line.lower() in {"exit", "quit"}:
            speech_queue.put(None)
            break
        # —ç–º—É–ª—è—Ü–∏—è "—Å—Ç—Ä–∏–º–∞": –≤—ã–≤–æ–¥–∏–º –ø–æ —Å–ª–æ–≤–∞–º
        for word in line.split():
            print(word, end=" ", flush=True)
            buffer += word + " "
            # –∫–æ–≥–¥–∞ –µ—Å—Ç—å –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è ‚Äî —à–ª—ë–º –≤ TTS
            if any(buffer.endswith(end + " ") for end in [". ", "? ", "! "]):
                speech_queue.put(buffer.strip())
                buffer = ""
        print()
        if buffer.strip():
            # –æ—Å—Ç–∞—Ç–æ–∫ –≤ –∫–æ–Ω—Ü–µ —Å—Ç—Ä–æ–∫–∏
            speech_queue.put(buffer.strip())
            buffer = ""

if __name__ == "__main__":
    try:
        main()
    finally:
        speech_queue.put(None)

